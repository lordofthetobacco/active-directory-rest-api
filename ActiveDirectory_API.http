### Active Directory REST API - Machine-to-Machine Authentication Examples

### Step 1: Get Access Token (Client Credentials Flow)
# POST https://login.microsoftonline.com/5cbf4b45-97e8-498c-b584-ef6b12a29fe1/oauth2/v2.0/token
# Content-Type: application/x-www-form-urlencoded
# 
# grant_type=client_credentials&client_id=d5159527-16ba-4ae8-aa65-e9636855ad6c&client_secret=YOUR_CLIENT_SECRET&scope=https://graph.microsoft.com/.default

### Step 2: Health Check (No Authentication Required)
GET https://localhost:7001/api/health

### Step 3: Get User by SAM Account Name (Requires Authentication)
GET https://localhost:7001/api/users/john.doe
Authorization: Bearer YOUR_ACCESS_TOKEN_HERE

### Step 4: Search Users (Requires Authentication)
POST https://localhost:7001/api/users/search
Authorization: Bearer YOUR_ACCESS_TOKEN_HERE
Content-Type: application/json

{
  "searchTerm": "john",
  "maxResults": 10,
  "sortBy": "displayName",
  "sortAscending": true
}

### Step 5: Get User by Email (Requires Authentication)
GET https://localhost:7001/api/users/email/john.doe@company.com
Authorization: Bearer YOUR_ACCESS_TOKEN_HERE

### Step 6: Get User Groups (Requires Authentication)
GET https://localhost:7001/api/users/john.doe/groups
Authorization: Bearer YOUR_ACCESS_TOKEN_HERE

### Step 7: Get Group Information (Requires Authentication)
GET https://localhost:7001/api/groups/Administrators
Authorization: Bearer YOUR_ACCESS_TOKEN_HERE

### Step 8: Search Groups (Requires Authentication)
POST https://localhost:7001/api/groups/search
Authorization: Bearer YOUR_ACCESS_TOKEN_HERE
Content-Type: application/json

{
  "searchTerm": "admin",
  "maxResults": 20
}

### Step 9: Check User Group Membership (Requires Authentication)
GET https://localhost:7001/api/groups/Administrators/members/john.doe/check
Authorization: Bearer YOUR_ACCESS_TOKEN_HERE

### Step 10: Create User (Requires Admin Permissions)
POST https://localhost:7001/api/users
Authorization: Bearer YOUR_ACCESS_TOKEN_HERE
Content-Type: application/json

{
  "user": {
    "samAccountName": "jane.smith",
    "displayName": "Jane Smith",
    "givenName": "Jane",
    "surname": "Smith",
    "email": "jane.smith@company.com",
    "userPrincipalName": "jane.smith@company.com",
    "department": "IT",
    "title": "Software Developer"
  },
  "password": "SecurePassword123!"
}

### Step 11: Update User (Requires Admin Permissions)
PUT https://localhost:7001/api/users/jane.smith
Authorization: Bearer YOUR_ACCESS_TOKEN_HERE
Content-Type: application/json

{
  "samAccountName": "jane.smith",
  "displayName": "Jane Smith",
  "givenName": "Jane",
  "surname": "Smith",
  "email": "jane.smith@company.com",
  "userPrincipalName": "jane.smith@company.com",
  "department": "IT",
  "title": "Senior Software Developer",
  "office": "Building A, Floor 2"
}

### Step 12: Enable User (Requires Admin Permissions)
POST https://localhost:7001/api/users/jane.smith/enable
Authorization: Bearer YOUR_ACCESS_TOKEN_HERE

### Step 13: Reset User Password (Requires Admin Permissions)
POST https://localhost:7001/api/users/jane.smith/reset-password
Authorization: Bearer YOUR_ACCESS_TOKEN_HERE
Content-Type: application/json

{
  "newPassword": "NewSecurePassword456!"
}

### Step 14: Add User to Group (Requires Admin Permissions)
POST https://localhost:7001/api/groups/Developers/members/jane.smith
Authorization: Bearer YOUR_ACCESS_TOKEN_HERE

### Step 15: Remove User from Group (Requires Admin Permissions)
DELETE https://localhost:7001/api/groups/Developers/members/jane.smith
Authorization: Bearer YOUR_ACCESS_TOKEN_HERE

### Step 16: Delete User (Requires Admin Permissions)
DELETE https://localhost:7001/api/users/jane.smith
Authorization: Bearer YOUR_ACCESS_TOKEN_HERE

### Step 17: Get User Extension Attributes (Requires Authentication)
GET https://localhost:7001/api/users/john.doe/extension-attributes?attributes=extensionAttribute1,extensionAttribute2
Authorization: Bearer YOUR_ACCESS_TOKEN_HERE

### Step 18: Search Users by Full Name (Requires Authentication)
GET https://localhost:7001/api/users/search/fullname?q=John&maxResults=5
Authorization: Bearer YOUR_ACCESS_TOKEN_HERE

### Step 19: Search Users by UPN (Requires Authentication)
GET https://localhost:7001/api/users/search/upn?q=john.doe&maxResults=5
Authorization: Bearer YOUR_ACCESS_TOKEN_HERE

### Step 20: Search Groups by Name (Requires Authentication)
GET https://localhost:7001/api/groups/search/name?q=admin&maxResults=10
Authorization: Bearer YOUR_ACCESS_TOKEN_HERE

### Authentication Notes:
# 1. Replace YOUR_ACCESS_TOKEN_HERE with the actual JWT token obtained from Step 1
# 2. Replace YOUR_CLIENT_SECRET with your actual client secret
# 3. Tokens expire after 1 hour (3600 seconds)
# 4. Admin operations require Directory.ReadWrite.All, User.ReadWrite.All, or Group.ReadWrite.All permissions
# 5. Read operations require Directory.Read.All, User.Read.All, or Group.Read.All permissions

### Error Handling:
# - 401 Unauthorized: Invalid or expired token
# - 403 Forbidden: Insufficient permissions for the operation
# - 404 Not Found: Resource not found
# - 500 Internal Server Error: Server-side error

### Rate Limiting:
# Consider implementing rate limiting in your client application
# Microsoft Entra ID has rate limits for token requests
# Active Directory operations may have performance implications
